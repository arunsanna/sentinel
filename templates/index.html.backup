<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Repository Scanner</title>
    <!-- React and ReactDOM -->
    <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #e2e8f0;
        }
        
        .glass {
            background: rgba(255, 255, 255, 0.15);
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            border: 1px solid rgba(255, 255, 255, 0.18);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        }
        
        .repo-detail {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            z-index: 100;
            display: flex;
            flex-direction: column;
        }

        .repo-detail-header {
            position: sticky;
            top: 0;
            z-index: 5;
            padding: 1rem;
            margin: -1rem -1rem 1rem -1rem;
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
            background-color: rgba(255, 255, 255, 0.1);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
    </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-indigo-500 to-purple-600">
    <div id="root"></div>
    
    <script>
        // App implementation
        (function() {
            // Simple Icon component
            const Icon = function({ name, className }) { 
                return React.createElement('i', { 
                    className: `fas fa-${name} ${className || ''}` 
                });
            };
            
            // App component
            function App() {
                const [repositories, setRepositories] = React.useState([]);
                const [loading, setLoading] = React.useState(true);
                const [selectedRepo, setSelectedRepo] = React.useState(null);
                const [pullLogs, setPullLogs] = React.useState([]);
                const [pullInProgress, setPullInProgress] = React.useState(false);
                const [eventSource, setEventSource] = React.useState(null);
                
                // Clean up event source on component unmount or when repo changes
                React.useEffect(() => {
                    return () => {
                        if (eventSource) {
                            eventSource.close();
                        }
                    };
                }, [eventSource]);
                
                // Function to connect to SSE for pull progress
                const connectToPullProgressStream = (repoId) => {
                    // Close existing connection if any
                    if (eventSource) {
                        eventSource.close();
                    }
                    
                    // Create new connection
                    const newEventSource = new EventSource(`/api/repository/${repoId}/pull/progress`);
                    
                    newEventSource.onmessage = (event) => {
                        const data = JSON.parse(event.data);
                        
                        if (data.status === "heartbeat") {
                            // Ignore heartbeat messages
                            return;
                        }
                        
                        console.log("Pull progress update:", data);
                        
                        if (data.status === "completed") {
                            // Pull completed
                            setPullInProgress(false);
                            
                            // Add final log entry
                            setPullLogs(logs => [...logs, {
                                time: new Date().toLocaleTimeString(),
                                message: data.message || "Pull completed successfully",
                                status: "success"
                            }]);
                            
                            // Refresh repository list
                            fetchRepositories();
                            
                            // Close the connection
                            newEventSource.close();
                            setEventSource(null);
                        } else if (data.status === "error") {
                            // Error occurred
                            setPullInProgress(false);
                            
                            // Add error log entry
                            setPullLogs(logs => [...logs, {
                                time: new Date().toLocaleTimeString(),
                                message: data.message || "Error during pull operation",
                                status: "error"
                            }]);
                            
                            // Close the connection
                            newEventSource.close();
                            setEventSource(null);
                        } else if (data.status === "progress" || data.status === "running") {
                            // Update is in progress
                            setPullInProgress(true);
                            
                            // Add progress log entry if there's a message
                            if (data.update && data.update.message) {
                                setPullLogs(logs => [...logs, {
                                    time: new Date().toLocaleTimeString(),
                                    message: data.update.message,
                                    status: "info"
                                }]);
                            }
                        } else if (data.status === "started") {
                            // Pull has started
                            setPullInProgress(true);
                            setPullLogs([{
                                time: new Date().toLocaleTimeString(),
                                message: "Pull operation started",
                                status: "info"
                            }]);
                        }
                    };
                    
                    newEventSource.onerror = (error) => {
                        console.error("EventSource error:", error);
                        newEventSource.close();
                        setEventSource(null);
                        setPullInProgress(false);
                    };
                    
                    setEventSource(newEventSource);
                };
                
                // Function to start a repository pull
                const pullRepository = async (repoId) => {
                    try {
                        // Reset logs and set in-progress state
                        setPullLogs([]);
                        setPullInProgress(true);
                        
                        // Connect to progress stream
                        connectToPullProgressStream(repoId);
                        
                        // Make API call to pull repository
                        const response = await fetch(`/api/repository/${repoId}/pull`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                        
                        const result = await response.json();
                        
                        if (result.status !== 'started' && result.status !== 'already_pulling') {
                            setPullInProgress(false);
                            setPullLogs(logs => [...logs, {
                                time: new Date().toLocaleTimeString(),
                                message: result.error || 'Error initiating pull',
                                status: "error"
                            }]);
                        }
                    } catch (error) {
                        console.error('Error pulling repository:', error);
                        setPullInProgress(false);
                        setPullLogs(logs => [...logs, {
                            time: new Date().toLocaleTimeString(),
                            message: `Error: ${error.message}`,
                            status: "error"
                        }]);
                    }
                };
                
                // Fetch repositories on load
                const fetchRepositories = async () => {
                    try {
                        setLoading(true);
                        const response = await fetch('/api/repositories');
                        const data = await response.json();
                        setRepositories(data);
                        setLoading(false);
                    } catch (error) {
                        console.error("Error fetching repositories:", error);
                        setLoading(false);
                    }
                };
                
                // Initial fetch
                React.useEffect(() => {
                    fetchRepositories();
                }, []);
                
                return React.createElement(
                    'div', 
                    { className: 'container mx-auto px-4 py-8' },
                    
                    // Header
                    React.createElement(
                        'header',
                        { className: 'mb-8 text-center' },
                        React.createElement(
                            'div',
                            { className: 'flex items-center justify-center mb-4' },
                            React.createElement(Icon, { name: 'code-branch', className: 'text-4xl text-indigo-300 mr-4' }),
                            React.createElement('h1', { className: 'text-4xl font-bold' }, 'Repository Scanner')
                        ),
                        React.createElement('p', { className: 'text-xl opacity-80' }, 'Monitor and manage your Git repositories')
                    ),
                    
                    // Main content
                    loading ? 
                        // Loading state
                        React.createElement(
                            'div',
                            { className: 'glass p-8 text-center' },
                            React.createElement(Icon, { name: 'spinner', className: 'text-4xl animate-spin mb-4' }),
                            React.createElement('p', { className: 'text-xl' }, 'Loading repositories...')
                        ) :
                        
                        repositories.length === 0 ?
                            // Empty state
                            React.createElement(
                                'div',
                                { className: 'glass p-8 text-center' },
                                React.createElement(Icon, { name: 'folder-open', className: 'text-4xl mb-4' }),
                                React.createElement('p', { className: 'text-xl' }, 'No repositories found.')
                            ) :
                            
                            // Repository list
                            React.createElement(
                                'div',
                                { className: 'glass p-6' },
                                React.createElement('h2', { className: 'text-2xl font-bold mb-6 flex items-center' }, 
                                    React.createElement(Icon, { name: 'list', className: 'mr-3' }),
                                    `Repositories (${repositories.length})`
                                ),
                                React.createElement(
                                    'div',
                                    { className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4' },
                                    repositories.map(repo => React.createElement(
                                        'div',
                                        { 
                                            key: repo.id,
                                            className: 'glass p-4 hover:shadow-lg transition-all cursor-pointer',
                                            onClick: () => setSelectedRepo(repo)
                                        },
                                        React.createElement('h3', { className: 'font-bold text-lg mb-2 flex items-center' }, 
                                            React.createElement(Icon, { name: 'folder', className: 'mr-2 text-indigo-300' }),
                                            repo.name
                                        ),
                                        React.createElement('p', { className: 'text-sm mb-3 opacity-80 truncate', title: repo.path }, repo.path),
                                        React.createElement('div', { className: 'text-xs opacity-70 flex items-center' },
                                            React.createElement(Icon, { name: 'clock', className: 'mr-2' }),
                                            'Last Modified: ',
                                            new Date(repo.last_modified).toLocaleString()
                                        )
                                    ))
                                )
                            ),
                    
                    // Repository detail modal
                    selectedRepo && React.createElement(
                        React.Fragment,
                        null,
                        // Modal overlay
                        React.createElement('div', { 
                            className: 'fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-40',
                            onClick: () => setSelectedRepo(null)
                        }),
                        
                        // Modal content
                        React.createElement(
                            'div',
                            { 
                                className: 'glass repo-detail p-6',
                                onClick: (e) => e.stopPropagation()
                            },
                            // Header with close button
                            React.createElement(
                                'div',
                                { className: 'repo-detail-header' },
                                React.createElement(
                                    'div',
                                    { className: 'flex justify-between items-center' },
                                    React.createElement('h2', { className: 'text-2xl font-bold' }, 
                                        React.createElement(Icon, { name: 'folder-open', className: 'mr-3 text-indigo-300' }),
                                        selectedRepo.name
                                    ),
                                    React.createElement(
                                        'button',
                                        { 
                                            className: 'text-lg p-2 rounded-full hover:bg-white/10',
                                            onClick: () => setSelectedRepo(null)
                                        },
                                        React.createElement(Icon, { name: 'times' })
                                    )
                                )
                            ),
                            
                            // Repository details
                            React.createElement(
                                'div',
                                { className: 'mt-4' },
                                React.createElement(
                                    'div',
                                    { className: 'mb-4' },
                                    React.createElement('h3', { className: 'text-lg font-semibold mb-2' }, 'Repository Path'),
                                    React.createElement('p', { 
                                        className: 'text-sm bg-black/20 p-3 rounded-lg break-all',
                                        style: { 
                                            wordBreak: 'break-all', 
                                            hyphens: 'auto',
                                            maxWidth: '100%',
                                            fontSize: '0.875rem',
                                            lineHeight: '1.25rem',
                                            padding: '0.5rem'
                                        }
                                    }, selectedRepo.path)
                                ),
                                React.createElement(
                                    'div',
                                    { className: 'mb-4' },
                                    React.createElement('h3', { className: 'text-lg font-semibold mb-2' }, 'Last Modified'),
                                    React.createElement('p', { className: 'text-sm' }, new Date(selectedRepo.last_modified).toLocaleString())
                                ),
                                React.createElement(
                                    'div',
                                    { className: 'mt-6' },
                                    React.createElement(
                                        'button',
                                        { 
                                            className: `bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg flex items-center ${pullInProgress ? 'opacity-50 cursor-not-allowed' : ''}`,
                                            onClick: () => pullRepository(selectedRepo.id),
                                            disabled: pullInProgress
                                        },
                                        pullInProgress 
                                            ? React.createElement(Icon, { name: 'spinner', className: 'mr-2 animate-spin' })
                                            : React.createElement(Icon, { name: 'sync-alt', className: 'mr-2' }),
                                        pullInProgress ? 'Pulling...' : 'Pull Latest Changes'
                                    ),
                                    
                                    // Pull logs section
                                    pullLogs.length > 0 && React.createElement(
                                        'div',
                                        { className: 'mt-4' },
                                        React.createElement('h3', { className: 'text-lg font-semibold mb-2' }, 'Pull Logs'),
                                        React.createElement(
                                            'div',
                                            { 
                                                className: 'bg-gray-900/80 text-gray-200 p-3 rounded-lg max-h-36 overflow-y-auto text-sm font-mono',
                                                style: { fontSize: '0.75rem' }
                                            },
                                            pullLogs.map((log, index) => React.createElement(
                                                'div',
                                                { 
                                                    key: index,
                                                    className: `py-1 border-b border-gray-800 last:border-0 ${
                                                        log.status === 'error' ? 'text-red-400' :
                                                        log.status === 'success' ? 'text-green-400' : 'text-blue-300'
                                                    }`
                                                },
                                                React.createElement('span', { className: 'text-gray-500 mr-2' }, log.time),
                                                React.createElement(Icon, { 
                                                    name: log.status === 'error' ? 'times-circle' :
                                                          log.status === 'success' ? 'check-circle' : 'info-circle',
                                                    className: 'mr-1'
                                                }),
                                                log.message
                                            ))
                                        )
                                    )
                                )
                            )
                        )
                    )
                );
            }
            
            // Render the app
            const domContainer = document.getElementById('root');
            const root = ReactDOM.createRoot(domContainer);
            root.render(React.createElement(App));
        })();
    </script>
    
    <noscript>
        <div class="p-8 text-center text-white">
            <h1 class="text-3xl font-bold mb-4">Repository Scanner</h1>
            <p class="text-lg">You need to enable JavaScript to run this app.</p>
        </div>
    </noscript>
</body>
</html>
    </script>
    
    <noscript>
        <div class="p-8 text-center text-white">
            <h1 class="text-3xl font-bold mb-4">Repository Scanner</h1>
            <p class="text-lg">You need to enable JavaScript to run this app.</p>
        </div>
    </noscript>
</body>
</html>
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            z-index: 10;
            max-width: 300px;
            word-wrap: break-word;
            white-space: normal;
            visibility: hidden;
            opacity: 0;
            transition: opacity 0.2s;
        }
        
        .path-wrapper:hover .path-tooltip {
            visibility: visible;
            opacity: 1;
        }
        
        .repo-detail {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            z-index: 100;
            display: flex;
            flex-direction: column;
        }

        .repo-detail-header {
            position: sticky;
            top: 0;
            z-index: 5;
            padding: 1rem;
            margin: -1rem -1rem 1rem -1rem;
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            background-color: rgba(255, 255, 255, 0.1);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .repo-detail-body {
            flex: 1;
            overflow-y: auto;
            padding-right: 0.5rem;
        }

        .repo-detail-section {
            margin-bottom: 1rem;
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 1rem;
            gap: 0.5rem;
        }
        
        .pagination-button {
            padding: 0.25rem 0.75rem;
            border-radius: 0.375rem;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 2rem;
            min-height: 2rem;
            background-color: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        
        .pagination-button:hover:not(:disabled) {
            background-color: rgba(255, 255, 255, 0.2);
        }
        
        .pagination-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .pagination-active {
            background-color: rgba(79, 70, 229, 0.6);
            color: white;
            font-weight: 500;
        }
        
        .logs-container {
            max-height: 250px;
            overflow-y: auto;
            background-color: rgba(17, 24, 39, 0.9);
            border-radius: 0.5rem;
            padding: 1rem;
            font-family: monospace;
            margin-top: 1rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .repo-modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            -webkit-backdrop-filter: blur(3px);
            backdrop-filter: blur(3px);
            z-index: 99;
        }
        
        .glass-button:hover {
            background: rgba(37, 99, 235, 0.8);
            transform: translateY(-2px);
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
        }
        
        .glass-button:disabled {
            background: rgba(156, 163, 175, 0.5);
            cursor: not-allowed;
            transform: none;
        }
        
        .glass-input {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.5);
            padding: 0.5rem 1rem;
            -webkit-backdrop-filter: blur(5px);
            backdrop-filter: blur(5px);
            transition: all 0.3s ease;
        }
        
        .glass-input:focus {
            outline: none;
            border: 1px solid rgba(59, 130, 246, 0.8);
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3);
        }
        
        .shimmer {
            background: linear-gradient(
                90deg,
                rgba(255, 255, 255, 0) 0%,
                rgba(255, 255, 255, 0.6) 50%,
                rgba(255, 255, 255, 0) 100%
            );
            background-size: 200% 100%;
            animation: shimmer 2s infinite;
        }
        
        @keyframes shimmer {
            0% {
                background-position: -200% 0;
            }
            100% {
                background-position: 200% 0;
            }
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb {
            background: rgba(156, 163, 175, 0.5);
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: rgba(107, 114, 128, 0.7);
        }
        
        /* Smooth transitions */
        .fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
    <!-- Placeholder for React app -->
    <div id="root"></div>
    <!-- Temporary script - will be replaced by proper React build -->
    <script>
      // Basic placeholder content
      const domContainer = document.querySelector('#root');
      const root = ReactDOM.createRoot(domContainer);
      
      // Icon component helper
      const Icon = ({ name, className }) => React.createElement('i', { className: `fas fa-${name} ${className || ''}` });
      
      // Card component to encapsulate the glassmorphic effect
      const GlassCard = ({ title, children, className, icon, darkMode }) => {
        return React.createElement(
          'div',
          { className: `${darkMode ? 'glass-dark' : 'glass'} p-6 mb-6 ${className || ''}` },
          React.createElement(
            'div',
            { className: 'flex items-center mb-4' },
            icon && React.createElement(Icon, { name: icon, className: 'mr-3 text-indigo-400' }),
            React.createElement('h2', { className: 'text-xl font-semibold' }, title)
          ),
          children
        );
      };
      
      // Simple component to show app is working
      function App() {
        const [repositories, setRepositories] = React.useState([]);
        const [loading, setLoading] = React.useState(false);
        const [scanPath, setScanPath] = React.useState("");
        const [scanDepth, setScanDepth] = React.useState(10);
        const [progress, setProgress] = React.useState(null);
        const [eventSource, setEventSource] = React.useState(null);
        const [pullProgress, setPullProgress] = React.useState({});
        const [pullEventSources, setPullEventSources] = React.useState({});
        const [selectedRepo, setSelectedRepo] = React.useState(null);
        const [darkMode, setDarkMode] = React.useState(false);
        const [menuOpen, setMenuOpen] = React.useState(false);
        const [logsExpanded, setLogsExpanded] = React.useState(false);
        const [currentPage, setCurrentPage] = React.useState(1);
        const [logsPerPage, setLogsPerPage] = React.useState(10);
        const [showPathTooltip, setShowPathTooltip] = React.useState({});
        
        // Toggle dark mode
        const toggleDarkMode = () => {
          setDarkMode(!darkMode);
        };
        
        // Function to scan for repositories
        const scanRepositories = async () => {
          setLoading(true);
          setRepositories([]);
          try {
            const path = encodeURIComponent(scanPath || '~/code');
            const depth = scanDepth || 10;
            
            // Start the scan
            const response = await fetch(`/api/scan?path=${path}&depth=${depth}`);
            const data = await response.json();
            
            if (data.status === "started") {
              // Connect to SSE stream for progress updates
              connectToEventStream();
            } else if (data.status === "already_scanning") {
              alert("A scan is already in progress");
              connectToEventStream();
            } else if (data.git_repositories) {
              setRepositories(data.git_repositories);
              setLoading(false);
            }
          } catch (error) {
            console.error("Error scanning repositories:", error);
            setLoading(false);
          }
        };
        
        // Connect to Server-Sent Events for progress updates
        const connectToEventStream = () => {
          // Close existing connection if any
          if (eventSource) {
            eventSource.close();
          }
          
          // Create new connection
          const newEventSource = new EventSource('/api/scan/progress');
          
          newEventSource.onmessage = (event) => {
            const data = JSON.parse(event.data);
            
            if (data.status === "completed") {
              // Scan completed
              setProgress(null);
              setLoading(false);
              setRepositories(data.result.git_repositories);
              newEventSource.close();
            } else if (data.status === "error") {
              // Error occurred
              setProgress({
                ...data.progress,
                error: data.message
              });
              setLoading(false);
              newEventSource.close();
            } else if (data.status === "progress" || data.status === "started" || data.status === "estimating") {
              // Update progress
              setProgress(data.progress);
            }
          };
          
          newEventSource.onerror = (error) => {
            console.error("EventSource error:", error);
            newEventSource.close();
            setLoading(false);
          };
          
          setEventSource(newEventSource);
        };
        
        // Clean up event source on unmount
        React.useEffect(() => {
          return () => {
            if (eventSource) {
              eventSource.close();
            }
            
            // Close all pull event sources
            Object.values(pullEventSources).forEach(source => {
              if (source) source.close();
            });
          };
        }, [eventSource, pullEventSources]);
        
        // Reset pagination and logs state when changing repositories
        React.useEffect(() => {
          setCurrentPage(1);
          setLogsExpanded(false);
        }, [selectedRepo]);
        
        // Get repositories on load
        React.useEffect(() => {
          const fetchRepositories = async () => {
            try {
              const response = await fetch('/api/repositories');
              const data = await response.json();
              setRepositories(data);
            } catch (error) {
              console.error("Error fetching repositories:", error);
            }
          };
          
          fetchRepositories();
        }, []);
        
        // Function to pull a repository
        const pullRepository = async (repoId) => {
          try {
            // Set initial progress state
            setPullProgress(prev => ({
              ...prev,
              [repoId]: { status: "starting", message: "Starting pull..." }
            }));
            
            const response = await fetch(`/api/repository/${repoId}/pull`, {
              method: 'POST'
            });
            const data = await response.json();
            
            if (data.status === "started" || data.status === "already_pulling") {
              // Connect to SSE stream for progress updates
              connectToPullEventStream(repoId);
            } else if (data.repository && data.pull_result) {
              // Handle immediate response (no background process)
              setRepositories(repos => 
                repos.map(repo => 
                  repo.id === repoId ? { ...repo, pull_status: data.pull_result.success ? "success" : "error" } : repo
                )
              );
              
              setPullProgress(prev => ({
                ...prev,
                [repoId]: { 
                  status: data.pull_result.success ? "completed" : "error", 
                  message: data.pull_result.message 
                }
              }));
            }
          } catch (error) {
            console.error("Error pulling repository:", error);
            setPullProgress(prev => ({
              ...prev,
              [repoId]: { status: "error", message: `Error: ${error.message}` }
            }));
          }
        };
        
        // Connect to Server-Sent Events for pull progress updates
        const connectToPullEventStream = (repoId) => {
          // Close existing connection if any
          if (pullEventSources[repoId]) {
            pullEventSources[repoId].close();
          }
          
          // Create new connection
          const newEventSource = new EventSource(`/api/repository/${repoId}/pull/progress`);
          
          newEventSource.onmessage = (event) => {
            const data = JSON.parse(event.data);
            
            if (data.status === "completed") {
              // Pull completed
              setPullProgress(prev => ({
                ...prev,
                [repoId]: { 
                  status: "completed", 
                  message: data.message || "Pull completed",
                  logs: [...(prev[repoId]?.logs || []), { message: data.message, status: "success" }]
                }
              }));
              
              // Update repository status
              if (data.result) {
                setRepositories(repos => 
                  repos.map(repo => 
                    repo.id === repoId ? { ...repo, pull_status: data.result.success ? "success" : "error" } : repo
                  )
                );
              }
              
              // Close the event source
              newEventSource.close();
              setPullEventSources(prev => {
                const updated = {...prev};
                delete updated[repoId];
                return updated;
              });
            } else if (data.status === "error") {
              // Error occurred
              setPullProgress(prev => ({
                ...prev,
                [repoId]: { 
                  status: "error", 
                  message: data.message || "Error during pull",
                  logs: [...(prev[repoId]?.logs || []), { message: data.message, status: "error" }]
                }
              }));
              
              // Update repository status
              setRepositories(repos => 
                repos.map(repo => 
                  repo.id === repoId ? { ...repo, pull_status: "error" } : repo
                )
              );
              
              // Close the event source
              newEventSource.close();
              setPullEventSources(prev => {
                const updated = {...prev};
                delete updated[repoId];
                return updated;
              });
            } else if (data.status === "progress" || data.status === "running") {
              // Update progress
              setPullProgress(prev => ({
                ...prev,
                [repoId]: { 
                  status: "running", 
                  message: data.update?.message || "Pulling...",
                  logs: [...(prev[repoId]?.logs || []), { 
                    message: data.update?.message || "Progress update", 
                    status: "info",
                    timestamp: new Date().toISOString()
                  }]
                }
              }));
            }
          };
          
          newEventSource.onerror = (error) => {
            console.error("Pull EventSource error:", error);
            newEventSource.close();
            
            setPullEventSources(prev => {
              const updated = {...prev};
              delete updated[repoId];
              return updated;
            });
          };
          
          // Save the event source
          setPullEventSources(prev => ({
            ...prev,
            [repoId]: newEventSource
          }));
        };
        
        return React.createElement(
          'div', 
          { className: `min-h-screen pb-10 ${darkMode ? 'text-gray-100' : 'text-gray-800'}` },
          
          // Header
          React.createElement(
            'header',
            { className: 'sticky top-0 z-50 mb-8 py-4 px-6 -webkit-backdrop-blur backdrop-blur bg-opacity-60 bg-gradient-to-r from-indigo-500/30 to-purple-500/30 border-b border-white/10 shadow-lg' },
            React.createElement(
              'div',
              { className: 'container mx-auto flex justify-between items-center' },
              React.createElement(
                'div',
                { className: 'flex items-center space-x-3' },
                React.createElement(Icon, { name: 'code-branch', className: 'text-2xl text-indigo-300' }),
                React.createElement('h1', { className: 'text-2xl font-bold tracking-tight' }, 'Repository Scanner')
              ),
              React.createElement(
                'div',
                { className: 'flex space-x-4 items-center' },
                React.createElement(
                  'button',
                  {
                    className: 'p-2 rounded-full transition-colors ' + (darkMode ? 'bg-gray-800/50 text-yellow-300' : 'bg-white/30 text-gray-700'),
                    onClick: toggleDarkMode,
                    title: darkMode ? 'Switch to light mode' : 'Switch to dark mode'
                  },
                  React.createElement(Icon, { name: darkMode ? 'sun' : 'moon' })
                ),
                React.createElement(
                  'button',
                  {
                    className: 'lg:hidden p-2 rounded-full transition-colors ' + (darkMode ? 'bg-gray-800/50' : 'bg-white/30'),
                    onClick: () => setMenuOpen(!menuOpen),
                    'aria-expanded': menuOpen
                  },
                  React.createElement(Icon, { name: menuOpen ? 'times' : 'bars' })
                )
              )
            )
          ),
          
          // Main content
          React.createElement(
            'main',
            { className: 'container mx-auto px-4 fade-in' },
          
            // Scan form
            React.createElement(
              GlassCard,
              { 
                title: 'Scan for Repositories', 
                icon: 'search',
                darkMode: darkMode,
                className: 'transform transition-all hover:shadow-xl'
              },
              React.createElement(
                'div',
                { className: 'flex flex-wrap lg:flex-nowrap gap-4 mb-4' },
                React.createElement(
                  'div',
                  { className: 'w-full' },
                  React.createElement(
                    'label', 
                    { className: 'block mb-2 font-medium text-sm' }, 
                    React.createElement(Icon, { name: 'folder-open', className: 'mr-2 text-indigo-400' }),
                    'Directory Path:'
                  ),
                  React.createElement('input', { 
                    type: 'text', 
                    className: 'glass-input w-full', 
                    value: scanPath,
                    placeholder: '~/code',
                    onChange: (e) => setScanPath(e.target.value)
                  })
                ),
                React.createElement(
                  'div',
                  { className: 'w-full lg:w-32' },
                  React.createElement(
                    'label', 
                    { className: 'block mb-2 font-medium text-sm' }, 
                    React.createElement(Icon, { name: 'level-down-alt', className: 'mr-2 text-indigo-400' }),
                    'Max Depth:'
                  ),
                  React.createElement('input', { 
                    type: 'number', 
                    className: 'glass-input w-full', 
                    value: scanDepth,
                    min: 1,
                    max: 20,
                    onChange: (e) => setScanDepth(parseInt(e.target.value))
                  })
                )
              ),
              React.createElement(
                'button',
                { 
                  className: 'glass-button px-6 py-3 text-white flex items-center justify-center w-full lg:w-auto',
                  onClick: scanRepositories,
                  disabled: loading || progress?.is_scanning
                },
                loading || progress?.is_scanning ? 
                  React.createElement(React.Fragment, null,
                    React.createElement('span', { className: 'animate-spin mr-2' }, React.createElement(Icon, { name: 'spinner' })),
                    'Scanning...'
                  ) : 
                  React.createElement(React.Fragment, null,
                    React.createElement(Icon, { name: 'search', className: 'mr-2' }),
                    'Scan Repositories'
                  )
              )
            ),
          
            // Progress indicator
            progress && progress.is_scanning && React.createElement(
              GlassCard,
              { 
                title: 'Scan Progress', 
                icon: 'tasks',
                darkMode: darkMode,
                className: 'fade-in'
              },
              React.createElement('p', { className: 'mb-3 text-sm' }, 
                React.createElement(Icon, { name: 'info-circle', className: 'mr-2 text-blue-400' }),
                progress.message || `Scanning ${progress.scan_path}`
              ),
              React.createElement(
                'div', 
                { className: 'w-full bg-black/10 rounded-full h-3 mb-4 overflow-hidden' },
                React.createElement(
                  'div',
                  { 
                    className: 'h-full rounded-full shimmer flex items-center justify-end pr-2 text-xs font-bold',
                    style: { 
                      width: progress.total_dirs > 0 ? 
                        `${Math.min(100, Math.round((progress.processed_dirs / progress.total_dirs) * 100))}%` : 
                        '60%',
                      background: 'linear-gradient(to right, rgba(79, 70, 229, 0.6) 0%, rgba(129, 140, 248, 0.6) 100%)'
                    }
                  },
                  progress.total_dirs > 0 ? 
                    `${Math.min(100, Math.round((progress.processed_dirs / progress.total_dirs) * 100))}%` : ''
                )
              ),
              React.createElement('div', { className: 'flex justify-between text-xs opacity-80' },
                React.createElement('span', { className: 'flex items-center' }, 
                  React.createElement(Icon, { name: 'folder-open', className: 'mr-2' }),
                  `Processed: ${progress.processed_dirs} ${progress.total_dirs > 0 ? `of ~${progress.total_dirs}` : ''}`
                ),
                React.createElement('span', { className: 'flex items-center' }, 
                  React.createElement(Icon, { name: 'code-branch', className: 'mr-2' }),
                  `Git Repos Found: ${progress.git_repos_found}`
                )
              )
            ),
            
            // Progress error message
            progress && progress.error && React.createElement(
              GlassCard,
              { 
                title: 'Scan Error', 
                icon: 'exclamation-triangle',
                darkMode: darkMode,
                className: 'border-red-300/50 text-red-600'
              },
              React.createElement('p', { className: 'flex items-start' },
                React.createElement(Icon, { name: 'times-circle', className: 'mr-2 mt-1 text-red-500' }),
                progress.error
              )
            ),
          
            // Repository list
            React.createElement(
              GlassCard,
              { 
                title: `Repositories (${repositories.length})`, 
                icon: 'code-branch',
                darkMode: darkMode,
                className: 'overflow-hidden'
              },
              
              // Repository Content
              repositories.length === 0 
                ? React.createElement('div', { className: 'py-8 text-center opacity-70' }, 
                    React.createElement(Icon, { name: 'folder-open', className: 'text-4xl mb-3 text-indigo-400' }),
                    React.createElement('p', null, 'No repositories found. Try scanning for repositories.')
                  )
                : React.createElement(
                    'div',
                    { className: 'repo-grid' },
                    repositories.map(repo => React.createElement(
                      'div',
                      { 
                        key: repo.path,
                        className: `${darkMode ? 'glass-dark' : 'glass-light'} repo-card p-4`,
                        onClick: () => setSelectedRepo(repo)
                      },
                      // Repository card content
                      React.createElement(
                        'div',
                        { className: 'flex justify-between items-start mb-3' },
                        React.createElement(
                          'div',
                          { className: 'w-full pr-2' },
                          React.createElement('h3', { className: 'font-medium text-base truncate' }, 
                            React.createElement(Icon, { name: 'folder', className: 'mr-2 text-indigo-400' }),
                            repo.name
                          ),
                          React.createElement(
                            'div', 
                            { className: 'path-wrapper mt-1 text-sm opacity-70' },
                            repo.path,
                            React.createElement('span', { className: 'path-tooltip' }, repo.path)
                          )
                        ),
                        repo.pull_status && React.createElement(
                          'span',
                          { 
                            className: `px-2 py-1 rounded-full text-xs inline-flex items-center whitespace-nowrap ${
                              repo.pull_status === 'success' ? 'bg-green-400/20 text-green-500 border border-green-400/30' : 
                              repo.pull_status === 'error' ? 'bg-red-400/20 text-red-500 border border-red-400/30' : 
                              'bg-yellow-400/20 text-yellow-600 border border-yellow-400/30'
                            }`
                          },
                          React.createElement(Icon, { 
                            name: repo.pull_status === 'success' ? 'check-circle' : 
                                  repo.pull_status === 'error' ? 'times-circle' : 'exclamation-circle',
                            className: 'mr-1' 
                          }),
                          repo.pull_status
                        )
                      ),
                      
                      // Repository card footer
                      React.createElement(
                        'div',
                        { className: 'text-sm mt-auto' },
                        React.createElement('div', { className: 'flex items-center mt-2 opacity-70' },
                          React.createElement(Icon, { name: 'clock', className: 'mr-2 text-indigo-400' }),
                          'Last Modified: ',
                          React.createElement('span', { className: 'ml-1' }, new Date(repo.last_modified).toLocaleString())
                        ),
                        pullProgress[repo.id]?.status === 'running' && React.createElement(
                          'div',
                          { className: 'mt-2 text-blue-600' },
                          React.createElement(
                            'div',
                            { className: 'flex items-center' },
                            React.createElement('span', { className: 'animate-spin mr-2' }, 
                              React.createElement(Icon, { name: 'spinner' })
                            ),
                            'Pulling...'
                          )
                        )
                      ),
                      // Click for details text
                      React.createElement(
                        'div', 
                        { className: 'mt-3 pt-2 border-t border-white/10 text-xs opacity-70 text-center' },
                        'Click to view details',
                        React.createElement(Icon, { name: 'arrow-right', className: 'ml-1' })
                      )
                    ))
                  ),
              
              // Repository detail modal
              selectedRepo && React.createElement(
                React.Fragment,
                null,
                // Modal overlay
                React.createElement('div', { 
                  className: 'repo-modal-overlay',
                  onClick: () => setSelectedRepo(null)
                }),
                
                // Modal content
                React.createElement(
                  'div',
                  { 
                    className: `${darkMode ? 'glass-dark' : 'glass'} repo-detail p-0 fade-in`,
                    onClick: (e) => e.stopPropagation()
                  },
                  // Header with close button - sticky at top
                  React.createElement(
                    'div',
                    { className: 'repo-detail-header' },
                    React.createElement(
                      'div',
                      { className: 'flex justify-between items-center' },
                      React.createElement('h2', { className: 'text-2xl font-bold' }, 
                        React.createElement(Icon, { name: 'folder-open', className: 'mr-3 text-indigo-400' }),
                        selectedRepo.name
                      ),
                      React.createElement(
                        'button',
                        { 
                          className: 'text-lg p-2 rounded-full hover:bg-white/10',
                          onClick: () => setSelectedRepo(null)
                        },
                        React.createElement(Icon, { name: 'times' })
                      )
                    )
                  ),
                  
                  // Scrollable content area
                  React.createElement(
                    'div',
                    { className: 'repo-detail-body p-6' },
                  React.createElement(
                    'div',
                    { className: 'grid grid-cols-1 md:grid-cols-2 gap-4 mb-6' },
                    React.createElement(
                      'div',
                      { className: 'flex items-start' },
                      React.createElement(Icon, { name: 'folder-tree', className: 'mr-3 mt-1 text-indigo-400 text-xl' }),
                      React.createElement(
                        'div',
                        { className: 'w-full overflow-hidden' },
                        React.createElement('div', { className: 'text-sm opacity-70' }, 'Repository Path'),
                        React.createElement('div', { 
                          className: 'font-medium break-words text-sm',
                          style: { 
                            wordBreak: 'break-all', 
                            hyphens: 'auto',
                            maxWidth: '100%',
                            fontSize: '0.875rem',
                            lineHeight: '1.25rem',
                            padding: '0.25rem 0'
                          }
                        }, selectedRepo.path)
                      )
                    ),
                    React.createElement(
                      'div',
                      { className: 'flex items-center' },
                      React.createElement(Icon, { name: 'clock', className: 'mr-3 text-indigo-400 text-xl' }),
                      React.createElement(
                        'div',
                        null,
                        React.createElement('div', { className: 'text-sm opacity-70' }, 'Last Modified'),
                        React.createElement('div', { className: 'font-medium' }, 
                          new Date(selectedRepo.last_modified).toLocaleString()
                        )
                      )
                    )
                  ),
                  
                  // Pull section
                  React.createElement(
                    'div',
                    { className: 'mb-6' },
                    React.createElement('h3', { className: 'text-lg font-semibold mb-3' }, 'Repository Actions'),
                    React.createElement(
                      'button',
                      { 
                        className: `glass-button px-6 py-3 text-white flex items-center
                          ${pullProgress[selectedRepo.id]?.status === 'running' ? 'bg-gray-500/60 cursor-not-allowed' : ''}`,
                        onClick: () => pullRepository(selectedRepo.id),
                        disabled: pullProgress[selectedRepo.id]?.status === 'running'
                      },
                      pullProgress[selectedRepo.id]?.status === 'running' ? 
                        React.createElement(React.Fragment, null,
                          React.createElement('span', { className: 'animate-spin mr-2' }, 
                            React.createElement(Icon, { name: 'spinner' })
                          ),
                          'Pulling Repository...'
                        ) : 
                        React.createElement(React.Fragment, null,
                          React.createElement(Icon, { name: 'sync-alt', className: 'mr-2' }),
                          'Pull Latest Changes'
                        )
                    )
                  ),
                  
                  // Pull status and logs
                  pullProgress[selectedRepo.id] && React.createElement(
                    'div',
                    { className: 'mt-6' },
                    // Status header
                    React.createElement(
                      'div',
                      { className: 'flex justify-between items-center mb-3' },
                      React.createElement('h3', { className: 'text-lg font-semibold' }, 'Pull Status'),
                      pullProgress[selectedRepo.id].logs && pullProgress[selectedRepo.id].logs.length > 0 && React.createElement(
                        'button',
                        {
                          className: 'text-indigo-400 hover:text-indigo-500 text-sm flex items-center',
                          onClick: () => setLogsExpanded(!logsExpanded)
                        },
                        React.createElement(Icon, { 
                          name: logsExpanded ? 'chevron-up' : 'chevron-down', 
                          className: 'mr-1' 
                        }),
                        logsExpanded ? 'Hide Logs' : 'Show Logs'
                      )
                    ),
                    
                    // Status message
                    React.createElement(
                      'div',
                      { 
                        className: `px-4 py-3 rounded-lg ${
                          pullProgress[selectedRepo.id].status === 'completed' ? 'bg-green-400/20 text-green-600' : 
                          pullProgress[selectedRepo.id].status === 'error' ? 'bg-red-400/20 text-red-600' : 
                          'bg-blue-400/20 text-blue-600'
                        }`
                      },
                      React.createElement(
                        'div',
                        { className: 'flex items-center' },
                        React.createElement(Icon, { 
                          name: pullProgress[selectedRepo.id].status === 'completed' ? 'check-circle' : 
                                pullProgress[selectedRepo.id].status === 'error' ? 'times-circle' : 'spinner',
                          className: `mr-2 ${pullProgress[selectedRepo.id].status === 'running' ? 'animate-spin' : ''}`
                        }),
                        pullProgress[selectedRepo.id].message
                      )
                    ),
                    
                    // Collapsible logs panel with pagination
                    pullProgress[selectedRepo.id]?.logs && pullProgress[selectedRepo.id].logs.length > 0 && logsExpanded && React.createElement(
                      React.Fragment,
                      null,
                      React.createElement(
                        'div',
                        {
                          className: 'mt-4 p-4 bg-gray-900/90 rounded-lg text-sm max-h-48 overflow-y-auto font-mono border border-gray-700/50'
                        },
                        (() => {
                          const logs = pullProgress[selectedRepo.id].logs;
                          const indexOfLastLog = currentPage * logsPerPage;
                          const indexOfFirstLog = indexOfLastLog - logsPerPage;
                          const currentLogs = logs.slice(indexOfFirstLog, indexOfLastLog);
                          
                          return currentLogs.map((log, index) => React.createElement(
                            'div',
                            {
                              key: indexOfFirstLog + index,
                              className: `py-1 ${
                                log.status === 'error' ? 'text-red-500' : 
                                log.status === 'success' ? 'text-green-500' : 
                                'text-gray-300'
                              }`
                            },
                            React.createElement(Icon, { 
                              name: log.status === 'error' ? 'exclamation-triangle' : 
                                    log.status === 'success' ? 'check' : 'arrow-right',
                              className: 'mr-2'
                            }),
                            log.message
                          ));
                        })()
                      ),
                      
                      // Pagination controls
                      (() => {
                        const logs = pullProgress[selectedRepo.id].logs;
                        const totalPages = Math.ceil(logs.length / logsPerPage);
                        
                        return React.createElement(
                          React.Fragment,
                          null,
                          // Log count info
                          React.createElement(
                            'div',
                            { className: 'text-xs text-center text-gray-400 mt-2 mb-1' },
                            `Showing logs ${indexOfFirstLog + 1}-${Math.min(indexOfLastLog, logs.length)} of ${logs.length}`
                          ),
                          // Pagination controls
                          totalPages > 1 && React.createElement(
                          'div',
                          { className: 'pagination mt-4' },
                          // Previous page button
                          React.createElement(
                            'button',
                            {
                              className: 'pagination-button',
                              onClick: () => setCurrentPage(prev => Math.max(prev - 1, 1)),
                              disabled: currentPage === 1
                            },
                            React.createElement(Icon, { name: 'chevron-left' })
                          ),
                          
                          // Page number buttons
                          (() => {
                            const pageNumbers = [];
                            
                            for (let i = 1; i <= totalPages; i++) {
                              // Only show a reasonable number of page buttons
                              if (
                                i === 1 || 
                                i === totalPages || 
                                (i >= currentPage - 1 && i <= currentPage + 1)
                              ) {
                                pageNumbers.push(i);
                              } else if (
                                i === currentPage - 2 || 
                                i === currentPage + 2
                              ) {
                                pageNumbers.push('...');
                              }
                            }
                            
                            // Remove duplicates and sequential ellipses
                            const uniquePageNumbers = [];
                            let lastValue = null;
                            
                            [...new Set(pageNumbers)].forEach(page => {
                              if (page === '...' && lastValue === '...') {
                                return;
                              }
                              uniquePageNumbers.push(page);
                              lastValue = page;
                            });
                            
                            return uniquePageNumbers.map((page, index) => {
                              if (page === '...') {
                                return React.createElement(
                                  'span',
                                  { key: `ellipsis-${index}`, className: 'pagination-button opacity-50' },
                                  '...'
                                );
                              }
                              
                              return React.createElement(
                                'button',
                                {
                                  key: page,
                                  className: `pagination-button ${currentPage === page ? 'pagination-active' : ''}`,
                                  onClick: () => setCurrentPage(page)
                                },
                                page
                              );
                            });
                          })(),
                          
                          // Next page button
                          React.createElement(
                            'button',
                            {
                              className: 'pagination-button',
                              onClick: () => setCurrentPage(prev => Math.min(prev + 1, totalPages)),
                              disabled: currentPage === totalPages
                            },
                            React.createElement(Icon, { name: 'chevron-right' })
                          )
                        );
                      })()
                    )
                  )
                )
              )
            )
          )
        );
      }
      
      root.render(React.createElement(App));
    </script>
</head>
<body class="min-h-screen bg-gradient-to-br from-indigo-500 to-purple-600">
    <!-- React will replace this content -->
    <!-- This is just a fallback in case JavaScript is disabled -->
    <noscript>
        <div class="p-8 text-center text-white">
            <h1 class="text-3xl font-bold mb-4">Repository Scanner</h1>
            <p class="text-lg">You need to enable JavaScript to run this app.</p>
        </div>
    </noscript>
</body>
</html>